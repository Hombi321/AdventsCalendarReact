{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\Gesch\\xE4ft\\\\2.Lehrjahr\\\\Repos\\\\CleanReact\\\\FirstReact\\\\myapplication\\\\src\\\\TodoApp\\\\App.js\";\n\n/**\r\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\r\n * This challenge is a little more involved than some of the past ones. Check the comments \r\n * in the code for some help on accomplishing this one\r\n * \r\n * Challenge: \r\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\r\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\r\n * 2. Pass the method down to the TodoItem component\r\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\r\n */\nimport React from \"react\";\nimport TodoItem from \"./TodoItem\";\nimport todosData from \"./Data.json\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      todoInState: todosData.todos\n    };\n  }\n\n  handleChange(id) {\n    alert(\"Das ist die ID: \" + id);\n    this.setState(prevState => {\n      const updatedTodos = prevState.todoInState.map(todo => {\n        if (todo.id === id) {\n          console.log(`Das sind die beiden Ids: ${todo.id} ${id}`);\n          todo.completed = !todo.completed;\n        }\n\n        return todo;\n      });\n      return {\n        todoInState: updatedTodos\n      };\n    });\n  }\n\n  render() {\n    const todoItems = this.state.todoInState.map(item => /*#__PURE__*/_jsxDEV(TodoItem, {\n      item: item,\n      handleChange: this.handleChange\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 62\n    }, this));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-list\",\n      children: todoItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["D:/GeschÃ¤ft/2.Lehrjahr/Repos/CleanReact/FirstReact/myapplication/src/TodoApp/App.js"],"names":["React","TodoItem","todosData","App","Component","constructor","handleChange","bind","state","todoInState","todos","id","alert","setState","prevState","updatedTodos","map","todo","console","log","completed","render","todoItems","item"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AAC9BC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAEP,SAAS,CAACQ;AADd,KAAb;AAIH;;AAEDJ,EAAAA,YAAY,CAACK,EAAD,EAAK;AACbC,IAAAA,KAAK,CAAC,qBAAoBD,EAArB,CAAL;AACA,SAAKE,QAAL,CAAcC,SAAS,IAAI;AACvB,YAAMC,YAAY,GAAGD,SAAS,CAACL,WAAV,CAAsBO,GAAtB,CAA0BC,IAAI,IAAI;AACnD,YAAIA,IAAI,CAACN,EAAL,KAAYA,EAAhB,EAAoB;AAChBO,UAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BF,IAAI,CAACN,EAAG,IAAGA,EAAG,EAAtD;AACAM,UAAAA,IAAI,CAACG,SAAL,GAAiB,CAACH,IAAI,CAACG,SAAvB;AACH;;AACD,eAAOH,IAAP;AACH,OANoB,CAArB;AAOA,aAAO;AACHR,QAAAA,WAAW,EAAEM;AADV,OAAP;AAGH,KAXD;AAYH;;AAEDM,EAAAA,MAAM,GAAG;AACL,UAAMC,SAAS,GAAG,KAAKd,KAAL,CAAWC,WAAX,CAAuBO,GAAvB,CAA2BO,IAAI,iBAAI,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA,IAA9B;AAAoC,MAAA,YAAY,EAAE,KAAKjB;AAAvD,OAAeiB,IAAI,CAACZ,EAApB;AAAA;AAAA;AAAA;AAAA,YAAnC,CAAlB;AAEA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACKW;AADL;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAlC6B;;AAqClC,eAAenB,GAAf","sourcesContent":["/**\r\n * Let's make it so our checkbox can actually mark our todo as complete or incomplete!\r\n * This challenge is a little more involved than some of the past ones. Check the comments \r\n * in the code for some help on accomplishing this one\r\n * \r\n * Challenge: \r\n * 1. Create an event handler in the App component for when the checkbox is clicked (which is an `onChange` event)\r\n *    a. This method will be the trickest part. Check the comments in the stubbed-out method below for some pseudocode to help guide you through this part\r\n * 2. Pass the method down to the TodoItem component\r\n * 3. In the TodoItem component, make it so when the `onChange` event happens, it calls the `handleChange` method and passes the id of the todo into the function\r\n */\r\n\r\nimport React from \"react\"\r\nimport TodoItem from \"./TodoItem\"\r\nimport todosData from \"./Data.json\"\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.state = {\r\n            todoInState: todosData.todos\r\n        }\r\n        \r\n    }\r\n    \r\n    handleChange(id) {\r\n        alert(\"Das ist die ID: \" +id)\r\n        this.setState(prevState => {\r\n            const updatedTodos = prevState.todoInState.map(todo => {\r\n                if (todo.id === id) {\r\n                    console.log(`Das sind die beiden Ids: ${todo.id} ${id}`)\r\n                    todo.completed = !todo.completed\r\n                }\r\n                return todo\r\n            })\r\n            return {\r\n                todoInState: updatedTodos\r\n            }\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        const todoItems = this.state.todoInState.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange}/>)\r\n        \r\n        return (\r\n            <div className=\"todo-list\">\r\n                {todoItems}\r\n            </div>\r\n        )    \r\n    }\r\n}\r\n\r\nexport default App"]},"metadata":{},"sourceType":"module"}